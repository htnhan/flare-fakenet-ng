###############################################################################
# Fakenet Configuration

[FakeNet]

# Specify whether or not FakeNet should divert traffic. Disable if you want to
# just start listeners and direct traffic manually (e.g. modify DNS server)
DivertTraffic:         Yes

###############################################################################
# Diverter Configuration

[Diverter]

# Specify what mode of operation to use. Options:
#   SingleHost - manipulate local traffic
#   MultiHost - manipulate traffic from foreign hosts
#   Auto - Use SingleMode on Windows or use MultiHost on Linux
#
# The current support for these modes on each supported platform is as follows:
#              | Windows    | Linux        |
#   -----------+------------+--------------+
#   SingleHost | Functional | Experimental |
#   MultiHost  |      -     | Functional   |
# NetworkMode:           SingleHost
# NetworkMode:           MultiHost
NetworkMode:           Auto

# DebugLevel (Linux only as of this writing): specify fine-grained debug print
# flags to enable. Enabling all logging when verbose mode is selected results
# in an unacceptable overhead cost, hence this setting.
DebugLevel:            Off

# MultiHost mode only: Specify what interfaces the Linux Diverter should create
# an iptables rule for to redirect traffic destined for other hosts to the
# local networking stack. This allows FakeNet-NG to log and handle packets
# from remote machines that are destined for non-local IP addresses that are
# either hard-coded or were returned in responses from the DNSListener. Use '*'
# (no quotes) or 'any' (no quotes, case-sensitive!) to indicate that this rule
# should be applied to all interfaces. Comment out to leave unconfigured.
LinuxRedirectNonlocal: *

# Set LinuxFlushIptables to Yes to have the Linux Diverter flush all iptables
# rules before adding its FakeNet-NG-specific rules to iptables. FakeNet-NG
# will restore all old rules when it exits, unless its termination is
# interrupted. If you disable this setting, and you accidentally interrupt the
# termination of FakeNet-NG (such as by hitting Ctrl+C more than once), then be
# prepared for network mayhem as the Diverter may receive each packet multiple
# times due to duplicate NFQUEUE rules.
LinuxFlushIptables:    Yes

# Incorporated so that users of the binary release may make this work for
# various Linux distros. On Ubuntu, this is `service dns-clean restart`. For
# other distributions, it may be `nscd -I hosts`. Check your manual for
# details.
LinuxFlushDNSCommand:  service dns-clean restart

# Specify whether or not to save captured traffic. You can also change
# the file prefix for the generated PCAPs.
DumpPackets:           Yes
DumpPacketsFilePrefix: packets

# DHCP server running under VMWare Host-Only networking does not configure
# interface gateway and DNS server. Gateway must be configured to allow
# Windows to attempt to route external traffic so that FakeNet could
# could intercept it. This option will automatically generate and set
# appropriate gateway and DNS addresses to allow normal operation.
FixGateway:            Yes
FixDNS:                Yes

# Enable 'ModifyLocalDNS' to statically set DNS server to the local machine.
# Linux: Modifies (and restores) /etc/resolv.conf on Linux to make this an
# ephemeral change.
ModifyLocalDNS:        Yes

# Enable 'StopDNSService' to stop Windows DNS client to see the actual 
# processes resolving domains. This is a no-op on Linux, until such time as DNS
# caching is observed to interfere with finding the pid associated with a DNS
# request.
StopDNSService:        Yes

# Enable 'RedirectAllTraffic' to optionally divert traffic going to ports not
# specifically listed in one of the listeners below. 'DefaultTCPListener' and
# 'DefaultUDPListener' will handle TCP and UDP traffic going to unspecified ports.
#
# NOTE: Setting default UDP listener will intercept all DNS traffic unless you
# enable a dedicated UDP port 53 DNS listener or add UDP port 53 to the 
# 'BlackListPortsUDP' below so that system's default DNS server is used instead.

RedirectAllTraffic:    Yes
DefaultTCPListener:    RawTCPListener
DefaultUDPListener:    RawUDPListener

# Specify TCP and UDP ports to ignore when diverting packets. 
# For example, you may want to avoid diverting UDP port 53 (DNS) traffic
# when trying to intercept a specific process while allowing the rest to 
# function normally
#
# NOTE: This setting is only honored when 'RedirectAllTraffic' is enabled.

BlackListPortsTCP: 139
BlackListPortsUDP: 67, 68, 137, 138, 443, 1900, 5355

# Specify processes to ignore when diverting traffic. Windows example used
# here.
# ProcessBlackList: java.exe

# Specify processes to consider when diverting traffic (others will be
# ignored). Linux examples used here.
# ProcessWhiteList: wget, nc

# Specify hosts to ignore when diverting traffic.
# HostBlackList: 6.6.6.6

###############################################################################
# Listener Configuration
#
# Listener configuration consists of generic settings used by the diverter which
# are the same for all listeners and listener specific settings. 
#
# NOTE: Listener section names will be used for logging.
#
# NOTE: Settings labels are not case-sensitive.
#
# The following settings are available for all listeners:
# * Enabled          - specify whether or not the listener is enabled.
# * Port             - TCP or UDP port to listen on.
# * Protocol         - TCP or UDP
# * Listener         - Listener name to handle traffic.
# * ProcessWhiteList - Only traffic from these processes will be modified
#                      and the rest will simply be forwarded.
# * ProcessBlackList - Traffic from all but these processes will be simply forwarded
#                      and the rest will be modified as needed.
# * HostWhiteList    - Only traffic to these hosts will be modified and
#                      the rest will be simply forwarded.
# * HostBlackList    - Traffic to these hosts will be simply forwarded
#                      and the rest will be modified as needed.
# * ExecuteCmd       - Execute command on the first connection packet. This is feature is useful
#                      for extending FakeNet-NG's functionality (e.g. launch a debugger on the
#                      connecting pid to help with unpacking and decoding.)
#
#                      The following format string variables are made available:
#                      * {pid}      - process id
#                      * {procname} - process executable name
#                      * {src_addr} - source address
#                      * {src_port} - source port
#                      * {dst_addr} - destination address
#                      * {dst_port} - destination port
#
# Listener entry which does not specify a specific listener service
# will still redirect all packets to the local machine on the specified port and
# subject to all the filters (processes, hosts, etc.). However, you must set-up a
# third party service (e.g. proxy servers) to accept these connections. This feature can be
# used to provide FakeNet-NG's passive traffic diverting and filtering capabilities to other
# applications.
#
# Listener specific settings:
#
# * Timeout          - Set connection timeout for any listeners that support
#                      TCP connections (e.g. RawListener, DNSListener, HTTPListener
#                      SMTPListener).
# * UseSSL           - Enable SSL support on the listener (RawListener, HTTPListener)
# * Webroot          - Set webroot path for HTTPListener.
# * DumpHTTPPosts    - Store HTTP Post requests for the HTTPListener.
# * DumpHTTPPostsFilePrefix - File prefix for the stored HTTP Post requests used by the HTTPListener.
# * DNSResponse      - IP address to respond with for A record DNS queries. (DNSListener)
# * NXDomains        - A number of DNS requests to ignore to let the malware cycle through
#                      all of the backup C2 servers. (DNSListener)

[Forwarder]
Enabled:     False
Port:        8080
Protocol:    TCP
ProcessWhiteList: chrome.exe

[RawTCPListener]
Enabled:     True
Port:        1337
Protocol:    TCP
Listener:    RawListener
UseSSL:      No
Timeout:     10

[RawUDPListener]
Enabled:     True
Port:        1337
Protocol:    UDP
Listener:    RawListener
UseSSL:      No
Timeout:     10

[FilteredListener]
Enabled:     False
Port:        31337
Protocol:    TCP
Listener:    RawListener
UseSSL:      No
Timeout:     10
ProcessWhiteList: ncat.exe, nc.exe
HostBlackList: 5.5.5.5

[DNS Server]
Enabled:     True
Port:        53
Protocol:    UDP
Listener:    DNSListener
ResponseA:   192.0.2.123
ResponseMX:  mail.evil2.com
ResponseTXT: FAKENET
NXDomains:   0

[HTTPListener80]
Enabled:     True
Port:        80
Protocol:    TCP
Listener:    HTTPListener
UseSSL:      No
Webroot:     defaultFiles/
Timeout:     10
#ProcessBlackList: dmclient.exe, OneDrive.exe, svchost.exe, backgroundTaskHost.exe, GoogleUpdate.exe, chrome.exe
DumpHTTPPosts: Yes
DumpHTTPPostsFilePrefix: http

[HTTPListener443]
Enabled:     True
Port:        443
Protocol:    TCP
Listener:    HTTPListener
UseSSL:      Yes
Webroot:     defaultFiles/
DumpHTTPPosts: Yes
DumpHTTPPostsFilePrefix: http

[SMTPListener]
Enabled:     True
Port:        25
Protocol:    TCP
Listener:    SMTPListener
UseSSL:      No

[FTPListener21]
Enabled:     True
Port:        21
Protocol:    TCP
Listener:    FTPListener
UseSSL:      No
FTProot:     defaultFiles/
PasvPorts:   60000-60010

[FTPListenerPASV]
Enabled:     True
Port:        60000-60010
Protocol:    TCP

[IRCServer]
Enabled:     True
Port:        6667
Protocol:    TCP
Listener:    IRCListener
UseSSL:      No
ServerName:  localhost
Timeout:     30

[TFTPListener]
Enabled:     True
Port:        69
Protocol:    UDP
Listener:    TFTPListener
TFTPRoot:    defaultFiles/

[POPServer]
Enabled:     True
Port:        110
Protocol:    TCP
Listener:    POPListener
UseSSL:      No
